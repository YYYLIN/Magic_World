#version 400  

in vec3 ModelPos;
in vec2 TexCoord;
in vec4 LightProPos;
in vec3 OutNormal;

in vec3 LightDirection;
in vec3 CameraPos;

out vec4 gl_FragColor; 

uniform sampler2D sampler0;
uniform sampler2D shadowMap;
uniform vec4 AmbientColor;

float ShadowCalculation(vec4 fragPosLightSpace)
{
    // 执行透视除法
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // 变换到[0,1]的范围
    projCoords = projCoords * 0.5 + 0.5;
	if(projCoords.z > 1.0)
        return 0.0;
    // 取得最近点的深度(使用[0,1]范围下的fragPosLight当坐标)
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    // 取得当前片元在光源视角下的深度
    float currentDepth = projCoords.z;
    // 检查当前片元是否在阴影中
	float bias = 0.005;
	
    return currentDepth - bias > closestDepth  ? 1.0 : 0.0;
}

void main()  
{
    vec3 TexColor = texture2D(sampler0, TexCoord).xyz;
	
    vec3 normal = normalize(OutNormal);
    vec3 lightColor = vec3(1.0);
    // Ambient
    vec3 ambient = 0.15 * TexColor;
    // Diffuse
    vec3 lightDir = normalize(LightDirection);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * lightColor;
    // Specular
    vec3 viewDir = normalize(CameraPos - ModelPos);
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    float spec = pow(max(dot(normal, halfwayDir), 0.0), 64.0);
    vec3 specular = spec * lightColor;        
		    // 计算阴影
    float shadow = ShadowCalculation(LightProPos);   
    vec3 lighting = (ambient + (1.0 - shadow) * (diffuse + specular)) * TexColor;    
    
    gl_FragColor = vec4(lighting, 1.0f);
}  