1.编写渲染线程和逻辑线程独立开
	(1)EngineErrorMessage兼容多线程并且线程独立内存空间互不影响
	(2)修改ShutdownEngine函数功能，不在释放引擎内存空间，改为关闭引擎的消息，可多线程调用并且
		增加参数long long（默认参数正常关闭） 关闭类型（增加enum（错误参照表） 正常0，错误1-n），const char* ，将此参数传到主线程中的EngineErrorMessage
   (3)为线程管理模块增加新功能，可添加线程监听消息的接口函数  （关键对象umap<uint,vector<std:funtion<uint,long long>>>）
  （1）全局静态内存对象管理器，快速添加大内存，但是无法释放，必须统一释放。
2.简化渲染接口调用
3.实现一个触发器模块，需要实现  可增加任意数量的处理函数。和触发函数。

4.实现一个监听器模块，需要实现 对任意类型的对象储存并监听 != 和 = 并且 
所有对象储存在同一块内存区域，并且在对象!= 为 true 时调用触发模块。

未指定时间任务：将加载通用字体加入引擎
	
